{"version":3,"sources":["../src/app.js"],"names":["app","swaggerDefinition","info","title","version","description","host","basePath","options","apis","swaggerSpec","dotenv","config","use","swaggerUi","serve","setup","express","urlencoded","extended","json","db","mongoose","connect","useUnifiedTopology","useNewUrlParser","then","console","log","err","get","req","res","status","message","userRoute","profileRoute","gifRoute","articleRoute","commentRoute","PORT","process","env","listen"],"mappings":";;AAAA;;AAEA;;AAKA;;AACA;;AAmBA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAEA;;;;AA/BA,IAAMA,GAAG,GAAG,0BAAZ;AAMA,IAAMC,iBAAiB,GAAG;AACtBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,KAAK,EAAE,uCADL;AAEFC,IAAAA,OAAO,EAAE,OAFP;AAGFC,IAAAA,WAAW,EAAE;AAHX,GADgB;AAMtBC,EAAAA,IAAI,EAAE,gBANgB;AAOtBC,EAAAA,QAAQ,EAAE;AAPY,CAA1B;AAUA,IAAMC,OAAO,GAAG;AACZP,EAAAA,iBAAiB,EAAjBA,iBADY;AAEZQ,EAAAA,IAAI,EAAE,CAAC,eAAD;AAFM,CAAhB;AAKA,IAAMC,WAAW,GAAG,8BAAaF,OAAb,CAApB;;AAWAG,mBAAOC,MAAP;;AAEAZ,GAAG,CAACa,GAAJ,CAAQ,OAAR,EAAiBC,6BAAUC,KAA3B,EAAkCD,6BAAUE,KAAV,CAAgBN,WAAhB,CAAlC;AACAV,GAAG,CAACa,GAAJ,CAAQI,oBAAQC,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR;AACAnB,GAAG,CAACa,GAAJ,CAAQI,oBAAQG,IAAR,EAAR,E,CAEA;;AAEA,IAAMC,EAAE,GAAG,gHAAX;;AAEAC,qBAASC,OAAT,CAAiBF,EAAjB,EAAqB;AAAEG,EAAAA,kBAAkB,EAAE,IAAtB;AAA4BC,EAAAA,eAAe,EAAE;AAA7C,CAArB,EACKC,IADL,CACU;AAAA,SAAMC,OAAO,CAACC,GAAR,CAAY,gCAAZ,CAAN;AAAA,CADV,WAEW,UAAAC,GAAG;AAAA,SAAIF,OAAO,CAACC,GAAR,CAAYC,GAAZ,CAAJ;AAAA,CAFd,E,CAIA;;;AACA7B,GAAG,CAAC8B,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvBA,EAAAA,GAAG,CAACZ,IAAJ,CAAS;AACLa,IAAAA,MAAM,EAAE,SADH;AAELC,IAAAA,OAAO,EAAE;AAFJ,GAAT,EAGGD,MAHH,CAGU,GAHV;AAIH,CALD;AAOAjC,GAAG,CAACa,GAAJ,CAAQ,GAAR,EAAasB,gBAAb;AACAnC,GAAG,CAACa,GAAJ,CAAQ,GAAR,EAAauB,mBAAb;AACApC,GAAG,CAACa,GAAJ,CAAQ,GAAR,EAAawB,eAAb;AACArC,GAAG,CAACa,GAAJ,CAAQ,GAAR,EAAayB,oBAAb;AACAtC,GAAG,CAACa,GAAJ,CAAQ,GAAR,EAAa0B,mBAAb;AAEA,IAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;AAEAxC,GAAG,CAAC2C,MAAJ,CAAWH,IAAX,EAAiB,YAAM;AACnBb,EAAAA,OAAO,CAACC,GAAR,wCAA4CY,IAA5C;AACH,CAFD","sourcesContent":["import \"@babel/polyfill\";\r\n\r\nimport express from 'express';\r\n\r\nconst app = express();\r\n\r\n\r\nimport swaggerUi from 'swagger-ui-express';\r\nimport swaggerJSDoc from 'swagger-jsdoc';\r\n\r\nconst swaggerDefinition = {\r\n    info: {\r\n        title: 'REST API for my twitter clone Web app',\r\n        version: '1.0.0',\r\n        description: 'This is the REST API for my product',\r\n    },\r\n    host: 'localhost:5000',\r\n    basePath: '/api'\r\n};\r\n\r\nconst options = {\r\n    swaggerDefinition,\r\n    apis: ['./docs/*.yaml']\r\n};\r\n\r\nconst swaggerSpec = swaggerJSDoc(options);\r\n\r\nimport userRoute from './routes/user.route';\r\nimport profileRoute from './routes/profile.route';\r\nimport gifRoute from './routes/gif.route';\r\nimport articleRoute from './routes/articles.route';\r\nimport commentRoute from './routes/comment.route';\r\n\r\nimport mongoose from 'mongoose';\r\n\r\nimport dotenv from 'dotenv';\r\ndotenv.config();\r\n\r\napp.use('/docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec));\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(express.json());\r\n\r\n// const db = process.env.DATABASE_URI;\r\n\r\nconst db = 'mongodb+srv://alaoabiodun10620:alao1996@cluster0-l9ge5.mongodb.net/clonelinkedInDB?retryWrites=true&w=majority'\r\n\r\nmongoose.connect(db, { useUnifiedTopology: true, useNewUrlParser: true })\r\n    .then(() => console.log('MongoDB connected successfully'))\r\n    .catch(err => console.log(err))\r\n\r\n// entry index enpoints\r\napp.get('/', (req, res) => {\r\n    res.json({\r\n        status: 'success',\r\n        message: 'This is the index page endpoint'\r\n    }).status(200);\r\n})\r\n\r\napp.use('/', userRoute);\r\napp.use('/', profileRoute);\r\napp.use('/', gifRoute);\r\napp.use('/', articleRoute);\r\napp.use('/', commentRoute);\r\n\r\nconst PORT = process.env.PORT || 4001;\r\n\r\napp.listen(PORT, () => {\r\n    console.log(`The server is listen on PORT ${PORT}`);\r\n})"],"file":"app.js"}