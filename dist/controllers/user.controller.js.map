{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["dotenv","config","UserController","req","res","body","firstName","lastName","email","username","password","isAdmin","status","json","message","User","findOne","userExist","newUser","bcrypt","genSalt","salts","hash","save","user","token","jwt","sign","id","process","env","JWT_SECRET","expiresIn","data","compare","IsMatch"],"mappings":"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","sourcesContent":["import User from '../models/user.model';\r\nimport bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport dotenv from 'dotenv';\r\ndotenv.config();\r\n\r\nclass UserController {\r\n\r\n    async signUp(req, res) {\r\n        try {\r\n            const { firstName, lastName, email, username, password, isAdmin } = req.body;\r\n\r\n            if (!firstName || !lastName || !email || !username || !password || !isAdmin) {\r\n                return res.status(400).json({ message: 'Please enter all fields' });\r\n            }\r\n\r\n            const userExist = await User.findOne({ email });\r\n            if (userExist) return res.json({ status: 400, message: 'User already exists' });\r\n\r\n            const newUser = new User({\r\n                firstName,\r\n                lastName,\r\n                email,\r\n                username,\r\n                password,\r\n                isAdmin\r\n            });\r\n\r\n            const salts = await bcrypt.genSalt(10);\r\n            const hash = await bcrypt.hash(newUser.password, salts);\r\n            newUser.password = hash;\r\n\r\n            const user = await newUser.save();\r\n            const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET, { expiresIn: 3600 });\r\n            res.json({\r\n                status: 200,\r\n                data: {\r\n                    token,\r\n                    id: user.id,\r\n                    username: user.username,\r\n                    email: user.email,\r\n                    password: user.password\r\n                }\r\n            })\r\n        } catch (err) {\r\n            res.json({\r\n                status: 'failed',\r\n                message: err\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async signIn(req, res) {\r\n        try {\r\n            const { email, password } = req.body;\r\n            const user = await User.findOne({ email });\r\n\r\n            if (!user) res.json({ status: 400, message: 'User does not exist' });\r\n            const IsMatch = await bcrypt.compare(password, user.password);\r\n            if (!IsMatch) {\r\n                return res.json({ status: 403, message: 'Incorrect username or password, please review details and try again' });\r\n            }\r\n            const token = jwt.sign(\r\n                { email: user.email, id: user.id },\r\n                process.env.JWT_SECRET,\r\n                { expiresIn: 3600 }\r\n            );\r\n\r\n            res.json({\r\n                status: 200,\r\n                data: {\r\n                    id: user.id,\r\n                    token,\r\n                    message: 'User Logged in Sucessfully'\r\n                }\r\n            });\r\n\r\n        } catch (err) {\r\n            res.json({\r\n                status: 'failed',\r\n                message: err\r\n            })\r\n        }\r\n    }\r\n\r\n    // signIn(req, res) {\r\n    //     const signIn = (req, res, next) => {\r\n    //         const { email, password } = req.body;\r\n\r\n    //         User.findOne({ email })\r\n    //             .then(user => {\r\n    //                 if (!user) {\r\n    //                     return res.json({ status: 404, message: 'User not found, please provide valid credentials' });\r\n    //                 }\r\n\r\n    //                 bcrypt.compare(password, user.password)\r\n    //                     .then(valid => {\r\n    //                         if (!valid) {\r\n    //                             return res.json({ status: 403, message: 'Incorrect username or password, please review details and try again' });\r\n    //                         }\r\n    //                         const token = jwt.sign(\r\n    //                             { email: user.email, id: user.id },\r\n    //                             process.env.JWT_SECRET,\r\n    //                             { expiresIn: 3600 }\r\n    //                         );\r\n\r\n    //                         res.json({\r\n    //                             status: 200,\r\n    //                             data: {\r\n    //                                 id: user.id,\r\n    //                                 token,\r\n    //                                 message: 'User Logged in Sucessfully'\r\n    //                             }\r\n    //                         });\r\n    //                     });\r\n    //             })\r\n    //             .catch(err => console.log(err));\r\n    //     }\r\n    // }\r\n\r\n}\r\n\r\nexport default new UserController();\r\n\r\n"],"file":"user.controller.js"}